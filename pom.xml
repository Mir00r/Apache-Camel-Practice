<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.mir00r</groupId>
    <artifactId>practiceApacheCamel</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>practiceApacheCamel</name>
    <description>Practicing Apache Camel Stuffs using Spring Boot</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>17</java.version>
        <org.apache.camel.version>4.0.6</org.apache.camel.version>
        <com.fasterxml.jackson.dataformat.version>2.17.2</com.fasterxml.jackson.dataformat.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Apache Camel Core -->
        <dependency>
            <groupId>org.apache.camel.springboot</groupId>
            <artifactId>camel-spring-boot-starter</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>

        <!-- Camel FTP Component -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ftp</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>

        <!-- Camel Jackson for JSON processing -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jackson</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>

        <!-- JAXB for XML processing -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jaxb</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.camel.springboot</groupId>
            <artifactId>camel-servlet-starter</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>


        <!-- Jackson data format for XML support -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jacksonxml</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>

        <!-- Camel HTTP component -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-http</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>

        <!-- Camel Metrics -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-metrics</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>

        <!--
                lib camel-bean used because some custom camel processors, routes
                used bean endpoint uri to call some methods in a bean in these locations,
                example : to("bean:xxx?method=yyy"") or toD(dynacmic bean & method determined at runtime [bean:xxx?method=yyy])
                or producerTemplate.requestBody("bean:<processor class name>"")
            -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-bean</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>

        <!--
            lib camel-direct used because some custom camel processors, routes
            used direct endpoint uri to call some routes in a direct, synchronous invocation style in these locations,
            example : to(direct:xxx) or toD(direct:xxx) or producerTemplate.requestBody(bean:<processor class name>)
        -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-direct</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>

        <!--
            lib camel-log used because some custom camel processors, routes
            used logging with field masking enabled in these locations,

            example: .to(log:<loggername>?logMask=true&showBody=true&multiline=true&skipBodyLineSeparator=false) or

            producerTemplate.requestBody(log:<loggername>?logMask=true&showBody=true&multiline=true&skipBodyLineSeparator=false)

            For more info, please refer to GatewayConfig.java -> camelContext.setLogMask(true) or MaskingFormatter
        -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-log</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>


        <!--
            lib camel-rest used because some custom camel processors, routes
            may have used REST endpoint uri to manage RESTful API call, if the server side supports RESTful,
            or no HTTP socket read timeout requirement, HTTP keep alive forever.


            REST endpoint uri may be used in these locations,
            example : to("rest:<url>"") or toD(dynacmic rest url [rest:<url>])
            or producerTemplate.requestBody("rest:<url>")

            camel-rest producer suports camel-jetty or camel-http as underlying HTTP client to manage the REST API call.
        -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-rest</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.camel.springboot</groupId>
            <artifactId>camel-kafka-starter</artifactId>
            <version>${org.apache.camel.version}</version>
        </dependency>

        <!-- Kafka Client -->
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
        </dependency>


        <!-- Optional: If you need more features of Jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
            <version>${com.fasterxml.jackson.dataformat.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.0.2</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
